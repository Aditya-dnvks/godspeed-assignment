version: "3.7"

services:
  node:
    container_name: node
    command: bash -c "/scripts/node_init.sh && sleep infinity"
    build:
      context: ./
    environment:
      - SHELL=/bin/bash
    volumes:
      - ..:/workspace/development/app:cached
      - ./scripts:/scripts
    working_dir: /workspace/development/app
    ports:
      - 3000:3000

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch01
    environment:
      - node.name=es01
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  postgresdb:
    container_name: postgresdb
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - postgresql-data:/var/lib/postgresql/data

  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper

  redis:
    container_name: redis
    image: redis:7.0
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'

  mongodb1:
    container_name: mongodb1
    image: mongo:5.0
    volumes:
      - mongodb1-data:/data/db
      - ./scripts:/scripts
    ports:
      - 27017:27017
    links:
      - mongodb2
      - mongodb3
    restart: always
    entrypoint: [ "/usr/bin/mongod","--keyFile", "/scripts/mongo-keyfile",  "--bind_ip_all", "--replSet", "gs_service" ]
    
  mongodb2:
    container_name: mongodb2
    image: mongo:5.0
    volumes:
      - mongodb2-data:/data/db
      - ./scripts:/scripts
    ports:
      - 27018:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod","--keyFile", "/scripts/mongo-keyfile",  "--bind_ip_all", "--replSet", "gs_service" ]

  mongodb3:
    container_name: mongodb3
    image: mongo:5.0
    volumes:
      - mongodb3-data:/data/db
      - ./scripts:/scripts
    ports:
      - 27019:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod","--keyFile", "/scripts/mongo-keyfile",  "--bind_ip_all", "--replSet", "gs_service" ]
            
volumes:
  elasticsearch-data:
  postgresql-data:
  kafka-data:
  zookeeper-data:
  mongodb1-data:
  mongodb2-data:
  mongodb3-data:    
